@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Архитектура_АгроТех_Системы_C1_1_внутренний_брокер

Person(персонал, "Персонал АгроТех Х", "Управление АгроТех Х")

System(платформа, "АгроТех Х - Цифровая платформа", "Единая платформа для управления хозяйством с внутренним брокером сообщений")
System(ферма, "Подсистема АгроТех Х - Ферма", "Отдельная платформа управлением фермой")

' Взаимодействия
платформа <-> ферма : Обмен данными через внутренний Брокер сообщений
персонал -> платформа : Управление хозяйством

@enduml


@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Архитектура_АгроТех_Системы_C1_2_внешний_брокер

Person(персонал, "Персонал АгроТех Х", "Управление АгроТех Х")

System(платформа, "АгроТех Х - Цифровая платформа", "Единая платформа для управления хозяйством")
System(брокер, "Внешний брокер сообщений", "Брокер сообщений для обмена с внешними системами")
System(ферма, "Подсистема АгроТех Х - Ферма", "Платформа управлением фермой")


' Взаимодействия
платформа <-> брокер : Данные о работе платформы АгроТех Х
ферма <-> брокер : Данные о состоянии скота на Ферме
персонал -> платформа : Управление хозяйством

@enduml

# Task1 — MVP платформы мониторинга ферм

# ADR-001: Использование внешней Apache Kafka как шины данных для всех агентов системы

**Дата:** 2025-09-13  
**Статус:** - 
**Автор:** Архитектор «АгроТех Х»

---

## Контекст
Компания «АгроТех Х» управляет теплицами, фермами и парком техники. Система собирает телеметрию с IoT-устройств, фермерских агентов и интегрируется с ERP и аналитикой.  

Необходима единая шина данных для всех агентов, оффлайн-буферизация и масштабируемость.

---

## Действующие лица (Actors)
| №  | Роль / Система                  | Описание взаимодействия                       |
| ---|---------------------------------|-----------------------------------------------|
| 1  | Персонал                        | Директор, агроном, механик, скотовод, аналитик |
| 2  | Локальный агент фермы          | Буферизация, локальная обработка данных, IoT-устройства |
| 3  | Внешняя Apache Kafka            | Единая шина событий для всей системы |
| 4  | Центральная платформа           | Ядро системы: обработка потоков, интеграция, аналитика, хранение данных |

---

## Функциональные требования
- Потоковая публикация данных с фермерских агентов в Kafka  
- Буферизация данных на фермах при оффлайн работе
- Интеграция с центральной платформой для аналитики и отчетов  
- Поддержка масштабируемости при добавлении новых агентов  

---

## Нефункциональные требования (NFR)
| №   | Требование                                              |
| --- | ------------------------------------------------------- |
| NFR-1 | Доступность платформы: SLA ≥ 99,95%                  |
| NFR-2 | Задержка оповещения видеоаналитики ≤ 5 секунд        |
| NFR-3 | Оффлайн-режим на фермах, синхронизация ≤ 10 минут   |
| NFR-4 | Масштабируемость: добавление новых агентов и ферм   |
| NFR-5 | Безопасность: TLS, OIDC, RBAC, шифрование данных    |
| NFR-6 | Высокая пропускная способность потоков событий      |
| NFR-7 | Поддержка различных протоколов устройств             |

---

## Решение
Используем внешнюю Apache Kafka как единую шину данных:

- Все агенты фермы публикуют события в Kafka  
- Центральная платформа подписывается на события для аналитики и обработки  
- Буферизация на фермах позволяет работать оффлайн  
- Масштабируемость достигается добавлением новых агентов и топиков  

### Контекстная диаграмма — Основное решение (C1)

@startuml ADR-001_C1_Kafka
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

' === Персонал ===
Person(персонал, "Персонал", "Директор, агроном, механик, скотовод, аналитик")

' === Центральная платформа ===
System_Boundary(система, "АгроТех Х - Цифровая платформа") {
    System(платформа, "АгроТех Х - Цифровая платформа", "Обработка потоков, аналитика, хранение данных")
}

' === Внешняя шина данных ===
System_Ext(Kafka, "Внешняя Apache Kafka", "Шина данных для всех систем")

' === Платформа фермы ===
System_Boundary(фермы, "Система животноводства (фермы)") {
    System(ферма, "Подсистема АгроТех Х - Ферма", "Локальная обработка, буферизация и сбор телеметрии")
}

' === Взаимодействия ===
персонал <-> платформа : Аналитика (Дашборды и отчеты)
ферма -> Kafka : Публикация событий
Kafka -> платформа : Поток данных для обработки
@enduml

## Альтернативное решение

- Использовать другой брокер сообщений вместо внешнего Apache Kafka.
- Потоки событий с фермы публикуются в очереди сообщений RabbitMQ/ActiveMQ, центральная платформа подписывается на нужные очереди.
- **Плюсы:** проще развертывание, меньше требований к кластерной инфраструктуре.  
- **Минусы:** ограниченная масштабируемость для большого числа агентов, сложнее поддерживать потоковую аналитическую обработку, нет нативной буферизации при оффлайн.

@startuml ADR-001_C1_RabbitMQ
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

' === Персонал ===
Person(персонал, "Персонал", "Директор, агроном, механик, скотовод, аналитик")

' === Центральная платформа ===
System_Boundary(система, "Система животноводства (фермы)") {
    System(платформа, "АгроТех Х - Цифровая платформа", "Обработка потоков, аналитика, хранение данных")
}

' === Внешняя шина данных (альтернатива) ===
System_Ext(MessageBroker, "RabbitMQ / ActiveMQ", "Брокер сообщений для всех систем")

' === Платформа фермы ===
System_Boundary(фермы, "АгроТех Х - Платформа фермы") {
    System(ферма, "Подсистема АгроТех Х - Ферма", "Локальная обработка, буферизация и сбор телеметрии")
}

' === Взаимодействия ===
персонал <-> платформа : Аналитика (Дашборды и отчеты)
ферма -> MessageBroker : Публикация событий
MessageBroker -> платформа : Поток данных для обработки

@enduml
