@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Архитектура_АгроТех_Системы_Context diagram_1

Person(скотовод, "Скотовод", "Управление фермой скота")
Person(персонал, "Персонал АгроТех Х", "Управление АгроТех Х")

System(агроПортал, "АгроТех Х - Цифровая платформа", "Единая платформа для управления хозяйством")
System(ферма, "Подсистема АгроТех Х - Ферма", "Отдельная платформа управлением фермой")

' Взаимодействия
агроПортал <-> ферма : Обмен данными через внутренний Брокер сообщений
скотовод -> ферма : Управление животноводством
персонал -> агроПортал : Управление хозяйством

@enduml


@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Архитектура_АгроТех_Системы_Context diagram_2

Person(скотовод, "Скотовод", "Управление фермой скота")
Person(персонал, "Персонал АгроТех Х", "Управление АгроТех Х")

System(платформа, "АгроТех Х - Цифровая платформа", "Единая платформа для управления хозяйством")
System(брокер, "Внешний брокер сообщений", "Брокер сообщений для обмена с внешними системами")
System(ферма, "Подсистема АгроТех Х - Ферма", "Платформа управлением фермой")


' Взаимодействия
платформа <-> брокер : Данные о работе платформы АгроТех Х
ферма <-> брокер : Данные о состоянии скота на Ферме
скотовод -> ферма : Управление животноводством
персонал -> платформа : Управление хозяйством

@enduml


# ADR-001: Использование внешней Apache Kafka как шины данных для всех агентов системы

**Дата:** 2025-09-13  
**Статус:** Принято  
**Автор:** Архитектурная команда «АгроТех Х»

---

## Контекст
Компания «АгроТех Х» управляет теплицами, фермами и парком техники. Система собирает телеметрию с IoT-устройств, фермерских агентов и интегрируется с ERP и аналитикой.  

Необходима единая шина данных для всех агентов, оффлайн-буферизация и масштабируемость.

---

## Действующие лица (Actors)
| №  | Роль / Система                  | Описание взаимодействия                       |
| ---|---------------------------------|-----------------------------------------------|
| 1  | Персонал                        | Директор, агроном, механик, скотовод, аналитик |
| 2  | Платформа фермы (Edge)          | Буферизация, локальная обработка данных, IoT-устройства |
| 3  | Внешняя Apache Kafka             | Единая шина событий для всей системы |
| 4  | Центральная платформа            | Ядро системы: обработка потоков, интеграция, аналитика, хранение данных |

---

## Функциональные требования
- Потоковая публикация данных с фермерских агентов в Kafka  
- Буферизация данных на фермах при оффлайн работе
- Интеграция с центральной платформой для аналитики и отчетов  
- Поддержка масштабируемости при добавлении новых агентов  

---

## Нефункциональные требования (NFR)
| №   | Требование                                              |
| --- | ------------------------------------------------------- |
| NFR-1 | Доступность платформы: SLA ≥ 99,95%                  |
| NFR-2 | Задержка оповещения видеоаналитики ≤ 5 секунд        |
| NFR-3 | Оффлайн-режим на фермах, синхронизация ≤ 10 минут   |
| NFR-4 | Масштабируемость: добавление новых агентов и ферм   |
| NFR-5 | Безопасность: TLS, OIDC, RBAC, шифрование данных    |
| NFR-6 | Высокая пропускная способность потоков событий      |
| NFR-7 | Поддержка различных протоколов устройств             |

---

## Решение
Используем **внешнюю Apache Kafka** как единую шину данных:

- Все агенты фермы публикуют события в Kafka  
- Центральная платформа подписывается на события для аналитики и обработки  
- Буферизация на фермах позволяет работать оффлайн  
- Масштабируемость достигается добавлением новых агентов и топиков  

### Контекстная диаграмма — Основное решение (C1)
```plantuml
@startuml ADR-002_C1_Kafka_Simplified
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

' === Персонал ===
Person_Boundary(Staff, "Персонал") {
    Person(StaffMember, "Персонал", "Директор, агроном, механик, скотовод, аналитик")
}

' === Центральная платформа ===
System(CentralPlatform, "Центральная платформа", "Обработка потоков, аналитика, интеграция")

' === Внешняя шина данных ===
System_Ext(Kafka, "Внешняя Apache Kafka", "Шина данных для всех агентов")

' === Платформа фермы ===
System_Boundary(FarmPlatform, "Платформа фермы") {
    System(FarmAgents, "Агенты фермы и IoT устройства", "Локальная обработка, буферизация и сбор телеметрии")
}

' === Взаимодействия ===
StaffMember -> CentralPlatform : Использует для отчетов и аналитики
FarmAgents -> Kafka : Публикация событий
Kafka -> CentralPlatform : Поток данных для обработки
CentralPlatform -> StaffMember : Дашборды и отчеты
@enduml

## Альтернативное решение

- Использовать другой брокер сообщений вместо внешнего Apache Kafka.
- Потоки событий с фермы публикуются в очереди сообщений RabbitMQ/ActiveMQ, центральная платформа подписывается на нужные очереди.
- **Плюсы:** проще развертывание, меньше требований к кластерной инфраструктуре.  
- **Минусы:** ограниченная масштабируемость для большого числа агентов, сложнее поддерживать потоковую аналитическую обработку, нет нативной буферизации при оффлайн.

@startuml ADR-002_C1_RabbitMQ
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

' === Персонал ===
Person_Boundary(Staff, "Персонал") {
    Person(StaffMember, "Персонал", "Директор, агроном, механик, скотовод, аналитик")
}

' === Центральная платформа ===
System(CentralPlatform, "Центральная платформа", "Обработка потоков, аналитика, интеграция")

' === Внешняя шина данных ===
System_Ext(RabbitMQ, "RabbitMQ", "Брокер сообщений для всех агентов")

' === Платформа фермы ===
System_Boundary(FarmPlatform, "Платформа фермы") {
    System(FarmAgents, "Агенты фермы и IoT устройства", "Локальная обработка и сбор телеметрии")
}

' === Взаимодействия ===
StaffMember -> CentralPlatform : Использует для отчетов и аналитики
FarmAgents -> RabbitMQ : Публикация событий
RabbitMQ -> CentralPlatform : Поток данных для обработки
CentralPlatform -> StaffMember : Дашборды и отчеты

@enduml

## Обоснование выбора

- **Единая шина (Kafka)** позволяет централизовать обработку событий из всех подсистем: теплицы, поля, техника, фермы.  
- **Гарантированная доставка и буферизация** обеспечивают оффлайн-режим и надежность.  
- **Горизонтальная масштабируемость**: можно подключать новые фермы, датчики и камеры без изменения архитектуры.  
- **Поддержка потоковой аналитики** и интеграции с Data Lake/DWH.  
- **Расширяемость**: подключение новых потребителей, ML моделей и аналитических сервисов.  

**Альтернативы (RabbitMQ, REST)** не дают единой шины и требуют отдельной реализации интеграций для каждой подсистемы, что усложняет сопровождение и снижает масштабируемость.  

---

## Дополнительная альтернатива

- Прямые REST/gRPC интеграции без брокера

---

## Последствия и риски

- Сложность эксплуатации кластера Kafka (требуются DevOps компетенции)  
- Необходимость мониторинга, репликации и резервного копирования  
- Объём видео и данных требует аккуратного хранения и компрессии  
- Видеоаналитика может давать ложные срабатывания — нужен human-in-loop  
- Ограниченные ресурсы edge-устройств → требуется оптимизация моделей ML
