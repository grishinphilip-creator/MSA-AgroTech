# Task3 — MVP платформы мониторинга ферм

# 1 - Диаграмма С3 для Система животноводства (ферма) с внутренней kafka 

@startuml Архитектура_АгроТех_Системы_С3_1_внутренняя_kafka
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

System_Boundary(ферма, "Система животноводства (ферма)") {

    Component(ферм_агент_core, "Core Локального агента", "Go", "Буферизация данных, синхронизация, управление командами")
    Component(ферм_агент_adapter, "Адаптер протоколов", "Go/Node", "MQTT, Modbus, LoRa → унифицированные события")
    Component(ферм_api, "Локальный API", "REST/gRPC", "Доступ к данным и управлению внутри фермы")
    ComponentDb(ферм_бд, "Локальная база данных", "Postgres", "События, метрики, локальные планы")
    
    Component(видеоаналитика_ingest, "Видео Ingest", "FFmpeg/GStreamer", "Приём потоков RTSP/ONVIF")
    Component(видеоаналитика_ai, "AI Inference", "Python+TensorRT", "Детекция животных, аномалий, здоровья")
    Component(видеоаналитика_events, "Генератор событий", "Python", "JSON-события по результатам анализа")
    
    Component(ферм_датчики, "Датчики и камеры", "Разное оборудование", "Телеметрия, видео")
    Component(кормление_ctrl, "Контроллер кормления/поения", "Embedded+C++", "Автоматическое управление кормушками и поилками")
    
    Component(локальный_ui, "Локальный интерфейс скотовода", "React/Static", "Мониторинг и ручное управление")
}

System_Boundary(платформа, "АгроТех Х - Цифровая платформа") {
    Component(kafka, "Внутренний брокер сообщений", "Apache Kafka", "Шина данных для всех подсистем платформы")
}

' --- Взаимодействие внутри фермы ---
Rel(ферм_датчики, видеоаналитика_ingest, "Потоки видео и телеметрии")
Rel(видеоаналитика_ingest, видеоаналитика_ai, "Видео кадры")
Rel(видеоаналитика_ai, видеоаналитика_events, "Результаты анализа")
Rel(видеоаналитика_events, ферм_агент_core, "JSON события")
Rel(ферм_агент_adapter, ферм_агент_core, "Унифицированные события")
Rel(ферм_агент_core, ферм_бд, "Сохранение событий и метрик", "SQL")
Rel(ферм_агент_core, кормление_ctrl, "Команды управления")
Rel(локальный_ui, ферм_api, "Запросы управления и мониторинга")
Rel(ферм_api, ферм_агент_core, "API вызовы")

' --- Связи фермы с платформой ---
Rel(ферм_агент_core, kafka, "Публикация телеметрии и событий", "Kafka Protocol")
Rel(kafka, ферм_агент_core, "Доставка команд управления", "Kafka Protocol")

@enduml

# 2 - Диаграмма С3 для Система животноводства (ферма) с внешней kafka

@startuml Архитектура_АгроТех_Системы_С3_2_внешняя_kafka
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

System_Boundary(ферма, "Система животноводства (ферма)") {

    Component(ферм_агент_core, "Core Локального агента", "Go", "Буферизация данных, синхронизация, управление командами")
    Component(ферм_агент_adapter, "Адаптер протоколов", "Go/Node", "MQTT, Modbus, LoRa → унифицированные события")
    Component(ферм_api, "Локальный API", "REST/gRPC", "Доступ к данным и управлению внутри фермы")
    ComponentDb(ферм_бд, "Локальная база данных", "Postgres", "События, метрики, локальные планы")
    
    Component(видеоаналитика_ingest, "Видео Ingest", "FFmpeg/GStreamer", "Приём потоков RTSP/ONVIF")
    Component(видеоаналитика_ai, "AI Inference", "Python+TensorRT", "Детекция животных, аномалий, здоровья")
    Component(видеоаналитика_events, "Генератор событий", "Python", "JSON-события по результатам анализа")
    
    Component(ферм_датчики, "Датчики и камеры", "Разное оборудование", "Телеметрия, видео")
    Component(кормление_ctrl, "Контроллер кормления/поения", "Embedded+C++", "Автоматическое управление кормушками и поилками")
    
    Component(локальный_ui, "Локальный интерфейс скотовода", "React/Static", "Мониторинг и ручное управление")
}

System_Boundary(внешние_интеграции, "Интеграционный слой") {
    Component(внешняя_kafka, "Внешний брокер сообщений", "Apache Kafka", "Обмен сообщениями между фермами и платформой")
}

' --- Взаимодействие внутри фермы ---
Rel(ферм_датчики, видеоаналитика_ingest, "Потоки видео и телеметрии")
Rel(видеоаналитика_ingest, видеоаналитика_ai, "Видео кадры")
Rel(видеоаналитика_ai, видеоаналитика_events, "Результаты анализа")
Rel(видеоаналитика_events, ферм_агент_core, "JSON события")
Rel(ферм_агент_adapter, ферм_агент_core, "Унифицированные события")
Rel(ферм_агент_core, ферм_бд, "Сохранение событий и метрик", "SQL")
Rel(ферм_агент_core, кормление_ctrl, "Команды управления")
Rel(локальный_ui, ферм_api, "Запросы управления и мониторинга")
Rel(ферм_api, ферм_агент_core, "API вызовы")

' --- Связи фермы с внешним брокером ---
Rel(ферм_агент_core, внешняя_kafka, "Публикация телеметрии и событий", "Kafka Protocol")
Rel(внешняя_kafka, ферм_агент_core, "Доставка команд управления", "Kafka Protocol")

@enduml

#3 Диаграмма С3 для Система животноводства (ферма) с внешней RabbitMQ

@startuml Архитектура_АгроТех_Системы_С3_2_внешняя_rabbitmq
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

System_Boundary(ферма, "Система животноводства (ферма)") {

    Component(ферм_агент_core, "Core Локального агента", "Go", "Буферизация данных, синхронизация, управление командами")
    Component(ферм_агент_adapter, "Адаптер протоколов", "Go/Node", "MQTT, Modbus, LoRa → унифицированные события")
    Component(ферм_api, "Локальный API", "REST/gRPC", "Доступ к данным и управлению внутри фермы")
    ComponentDb(ферм_бд, "Локальная база данных", "Postgres", "События, метрики, локальные планы")
    
    Component(видеоаналитика_ingest, "Видео Ingest", "FFmpeg/GStreamer", "Приём потоков RTSP/ONVIF")
    Component(видеоаналитика_ai, "AI Inference", "Python+TensorRT", "Детекция животных, аномалий, здоровья")
    Component(видеоаналитика_events, "Генератор событий", "Python", "JSON-события по результатам анализа")
    
    Component(ферм_датчики, "Датчики и камеры", "Разное оборудование", "Телеметрия, видео")
    Component(кормление_ctrl, "Контроллер кормления/поения", "Embedded+C++", "Автоматическое управление кормушками и поилками")
    
    Component(локальный_ui, "Локальный интерфейс скотовода", "React/Static", "Мониторинг и ручное управление")
}

System_Boundary(внешние_интеграции, "Интеграционный слой") {
    Component(внешний_rabbitmq, "Внешний брокер сообщений", "RabbitMQ", "Обмен сообщениями между фермами и платформой")
}

' --- Взаимодействие внутри фермы ---
Rel(ферм_датчики, видеоаналитика_ingest, "Потоки видео и телеметрии")
Rel(видеоаналитика_ingest, видеоаналитика_ai, "Видео кадры")
Rel(видеоаналитика_ai, видеоаналитика_events, "Результаты анализа")
Rel(видеоаналитика_events, ферм_агент_core, "JSON события")
Rel(ферм_агент_adapter, ферм_агент_core, "Унифицированные события")
Rel(ферм_агент_core, ферм_бд, "Сохранение событий и метрик", "SQL")
Rel(ферм_агент_core, кормление_ctrl, "Команды управления")
Rel(локальный_ui, ферм_api, "Запросы управления и мониторинга")
Rel(ферм_api, ферм_агент_core, "API вызовы")

' --- Связи фермы с внешним брокером ---
Rel(ферм_агент_core, внешний_rabbitmq, "Публикация телеметрии и событий", "AMQP")
Rel(внешний_rabbitmq, ферм_агент_core, "Доставка команд управления", "AMQP")

@enduml

#4 - Диаграммы С4 основных компонент варианта с внешней kafka

@startuml Архитектура_АгроТех_Системы_C4_2_внешний_kafka

title Диаграмма кода (C4): Все ключевые компоненты фермы

' --- Локальный агент ---
package "Локальный агент фермы" {
  class "Core" as AgentCore {
    + буферизацияДанных()
    + синхронизацияСобытий()
    + обработкаКоманд()
  }

  class "Адаптер протоколов" as AgentAdapter {
    + mqttIngest()
    + modbusRead()
    + loraParse()
  }

  class "API" as AgentAPI {
    + restЗапрос()
    + grpcЗапрос()
  }

  class "База данных (Postgres)" as FarmDB

  AgentAPI --> AgentCore
  AgentAdapter --> AgentCore
  AgentCore --> FarmDB
}

' --- Видеоаналитика ---
package "Видеоаналитика" {
  class "Видео Ingest" as VideoIngest {
    + rtspПриём()
    + onvifDecode()
  }

  class "AI Inference" as VideoAI {
    + детекцияЖивотных()
    + анализЗдоровья()
  }

  class "Генератор событий" as VideoEvents {
    + jsonСобытие()
  }

  VideoIngest --> VideoAI
  VideoAI --> VideoEvents
  VideoEvents --> AgentCore : JSON-события
}

' --- Система кормления/поения ---
package "Система кормления/поения" {
  class "Core" as FeedCore {
    + выполнитьКоманду()
    + запуститьРасписание()
  }

  class "Адаптер протоколов" as FeedAdapter {
    + modbusWrite()
    + gpioControl()
  }

  class "Менеджер расписаний" as FeedSchedule {
    + загрузитьРасписание()
  }

  class "Менеджер команд" as FeedCommands {
    + принятьКоманду()
  }

  class "Менеджер безопасности" as FeedSafety {
    + проверитьОграничения()
  }

  class "База данных (SQLite)" as FeedDB

  FeedCore --> FeedCommands
  FeedCore --> FeedSchedule
  FeedCore --> FeedSafety
  FeedCore --> FeedAdapter
  FeedCore --> FeedDB
  AgentCore --> FeedCore : команды управления
}

' --- Датчики и камеры ---
package "Датчики и камеры" {
  class "IoT-датчики" as Sensors {
    + температура()
    + влажность()
    + движение()
  }

  class "Камеры" as Cameras {
    + видеопотокRTSP()
  }

  Sensors --> AgentAdapter
  Cameras --> VideoIngest
}

' --- Локальный интерфейс ---
package "Локальный UI" {
  class "Web-интерфейс" as LocalUI {
    + мониторинг()
    + ручноеУправление()
  }

  LocalUI --> AgentAPI
}

@enduml

