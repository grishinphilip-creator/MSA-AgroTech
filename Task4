# ADR-002 — Выбор технологии брокера сообщений для MVP платформы мониторинга ферм

## Контекст
Для реализации MVP системы мониторинга животноводческих ферм необходимо обеспечить обмен событиями, телеметрией и командами управления между локальными агентами на фермах и центральной цифровой платформой «АгроТех Х».  
Ключевой элемент архитектуры — брокер сообщений. В качестве кандидатов были рассмотрены **Apache Kafka** и **RabbitMQ**.  

## Критерии сравнения
Для объективной оценки выбраны следующие критерии:
1. **Производительность и масштабируемость**  
2. **Гарантия доставки сообщений**  
3. **Задержка доставки событий**  
4. **Поддержка IoT-протоколов (MQTT)**  
5. **Простота администрирования и эксплуатации**  
6. **Ресурсоёмкость и требования к инфраструктуре**  
7. **Интеграция с хранилищами данных и аналитикой**  
8. **Поддержка кластеризации и отказоустойчивости**  
9. **Соответствие MVP (быстрое внедрение, гибкость)**  
10. **Стоимость владения (TCO)**  

## Вариант А — Apache Kafka (основное решение)
- **Производительность:** очень высокая, поддерживает сотни тысяч сообщений в секунду.  
- **Гарантия доставки:** встроенные механизмы persistence, log-based хранение.  
- **Задержка:** от миллисекунд до секунд; подходит для потоковой аналитики.  
- **IoT-протоколы:** MQTT поддерживается через коннекторы и шлюзы.  
- **Администрирование:** сложнее в настройке, требует Zookeeper (в новой версии — KRaft).  
- **Ресурсоёмкость:** высокие требования к CPU, RAM, дискам.  
- **Интеграция с аналитикой:** нативная поддержка стриминга, Kafka Connect, интеграция с Spark/Flink.  
- **Кластеризация:** горизонтально масштабируется.  
- **MVP:** может быть избыточна, но обеспечивает правильный фундамент.  
- **TCO:** выше из-за инфраструктурных затрат и DevOps-компетенций.  

## Вариант B — RabbitMQ (альтернативное решение)
- **Производительность:** ниже Kafka, но достаточна для MVP (десятки тысяч сообщений/сек).  
- **Гарантия доставки:** подтверждения сообщений (ACK/NACK), persistence.  
- **Задержка:** низкая, миллисекунды.  
- **IoT-протоколы:** поддержка MQTT «из коробки».  
- **Администрирование:** проще в настройке и эксплуатации.  
- **Ресурсоёмкость:** относительно лёгкий, может работать даже на слабых серверах.  
- **Интеграция с аналитикой:** менее удобна, чем у Kafka, требует дополнительных компонентов (ETL).  
- **Кластеризация:** есть, но менее масштабируемая, чем у Kafka.  
- **MVP:** хорошо подходит для пилотного проекта.  
- **TCO:** ниже, чем у Kafka.  

## Сравнительная таблица

| Критерий                        | Kafka                | RabbitMQ            |
|---------------------------------|----------------------|---------------------|
| Производительность              | +++ (очень высокая) | ++ (достаточная)   |
| Гарантия доставки               | +++                 | ++                 |
| Задержка                        | ++                  | +++                |
| MQTT/IoT                        | ++ (через коннекторы)| +++ (из коробки)   |
| Простота эксплуатации           | +                   | +++                |
| Ресурсоёмкость                  | +                   | ++                 |
| Интеграция с аналитикой         | +++                 | +                  |
| Кластеризация                   | +++                 | ++                 |
| MVP-гибкость                    | ++                  | +++                |
| Стоимость (TCO)                 | +                   | ++                 |

## Резюме
- **Kafka** — промышленный стандарт для обработки потоковых данных, идеально подходящий для интеграции с аналитикой, хранилищами данных и масштабной эксплуатации. Несмотря на более высокую сложность и стоимость владения, обеспечивает стратегический фундамент для развития платформы «АгроТех Х».  
- **RabbitMQ** — упрощённый и быстрый для внедрения вариант, который может использоваться в ограниченных пилотах, но не обеспечивает ту же масштабируемость и глубину интеграции с аналитикой, как Kafka.  

## Обоснование выбора

- **Единая шина (Kafka)** позволяет централизовать обработку событий из всех подсистем: теплицы, поля, техника, фермы.  
- **Гарантированная доставка и буферизация** обеспечивают оффлайн-режим и надежность.  
- **Горизонтальная масштабируемость**: можно подключать новые фермы, датчики и камеры без изменения архитектуры.  
- **Поддержка потоковой аналитики** и интеграции с Data Lake/DWH.  
- **Расширяемость**: подключение новых потребителей, ML моделей и аналитических сервисов.  

**Альтернативы (RabbitMQ, REST)** не дают единой шины и требуют отдельной реализации интеграций для каждой подсистемы, что усложняет сопровождение и снижает масштабируемость.  

---

## Последствия и риски

- Сложность эксплуатации кластера Kafka (требуются DevOps компетенции)

**Рекомендация:**  
- Выбрать **Apache Kafka** как основной брокер сообщений для MVP и дальнейшего развития.  
- RabbitMQ может рассматриваться только как временный вариант для локальных пилотов, если будут серьёзные ограничения по инфраструктуре.  


