@startuml Архитектура_АгроТех_Системы_С2_1_внутренний_брокер

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(директор, "Директор хозяйства", "Управление через веб-портал")
Person(агроном, "Агроном", "Использует мобильное приложение")
Person(тепличник, "Тепличный комплекс", "Управление теплицами")
Person(механик, "Механик", "Мониторинг техники")
Person(аналитик, "Аналитик", "Работа с BI-системой")
Person(скотовод, "Скотовод", "Следит за кормлением и состоянием животных")

System_Boundary(платформа, "АгроТех Х - Цифровая платформа") {
    Container(веб_портал, "Веб-портал", "React", "Управление хозяйством")
    Container(мобильное_приложение, "Мобильное приложение", "Flutter", "Полевые работы")
    ContainerDb(erp, "ERP система (1С:Агро)", "1С", "Финансы, склад, кадры")
    
    Container_Boundary(тепличные_системы, "Тепличные комплексы") {
        Container(scada, "SCADA система", "Ignition", "Управление климатом")
        Container(тепличные_датчики, "Тепличные датчики", "Python", "Микроклимат, полив")
        Container(автополив, "Система автополива", "C++", "Управление орошением")
    }
    
    Container(kafka, "Брокер сообщений", "Apache Kafka", "Шина данных")
    
    Container_Boundary(iot_платформа, "IoT платформа") {
        Container(iot_шлюз, "IoT шлюз", "Node-RED", "Сбор данных с полей")
        Container(tsdb, "База временных рядов", "TimescaleDB", "Данные датчиков")
        Container(трекер_техники, "Трекер техники", "Java", "Мониторинг транспорта")
        Container(трекер_корма, "Трекер системы кормления скота", "Go", "Контроль кормушек и поилок")
    }
    
    Container_Boundary(полевые_данные, "Данные с полей") {
        Container(метео_данные, "Метеостанции", "Python", "Погодные условия")
        Container(почва, "Датчики почвы", "Python", "Влажность, состав")
        Container(урожайность, "Мониторинг урожая", "Python", "Камера+ИИ на технике")
    }
    
    Container_Boundary(управление_техникой, "Управление техникой") {
        Container(планировщик, "Планировщик заданий", "Kotlin", "Распределение работ")
        Container(мониторинг_гсм, "Мониторинг ГСМ", "Go", "Контроль топлива")
        Container(диагностика, "Диагностика", "C#", "Состояние техники")
    }
    
    Container_Boundary(данные, "Хранилища данных") {
        ContainerDb(data_lake, "Data Lake", "MinIO", "Сырые данные (S3-совместимое)")
        ContainerDb(dwh, "Data Warehouse", "ClickHouse", "Структурированные данные")
    }
    
    Container(bi, "BI система", "Power BI", "Отчеты и визуализация")
    Container(аналитика, "Аналитический модуль", "Python+Spark", "Анализ эффективности")
}

Container_Boundary(фермы, "Система животноводства (фермы)") {
    Container(ферм_агент, "Локальный агент фермы",  "Управление и буферизация данных")
    Container(видеоаналитика, "Видеоаналитика",  "Обработка потоков камер")
    ContainerDb(ферм_бд, "Локальная БД", "Postgres", "Хранение событий и метрик")
    Container(кормление, "Система кормления и поения", "Управление кормушками и поилками скота")
    Container(ферм_датчики, "Датчики и камеры", "Поведение, здоровье, пересчет поголовья, местоположение")
}

Rel(директор, веб_портал, "Использует")
Rel(агроном, мобильное_приложение, "Использует")
Rel(тепличник, scada, "Управляет")
Rel(механик, трекер_техники, "Мониторит")
Rel(аналитик, bi, "Анализирует")
Rel(скотовод, трекер_корма, "Мониторит и управляет фермой")

Rel(iot_шлюз, kafka, "Публикует данные", "Kafka Protocol")
Rel(тепличные_датчики, kafka, "Публикует данные", "MQTT->Kafka")
Rel(трекер_техники, kafka, "Публикует позиции", "Kafka Protocol")
Rel(трекер_корма, kafka, "Публикует данные кормления", "Kafka Protocol")
Rel(kafka, data_lake, "Сырые данные", "Kafka Connect+S3")
Rel(kafka, dwh, "Трансформированные данные", "ETL+Airflow")

Rel(scada, kafka, "Публикует климат-данные", "OPC UA->Kafka")
Rel(автополив, scada, "Получает команды", "Modbus TCP")
Rel(тепличные_датчики, scada, "Передает данные", "LoRaWAN")

Rel(метео_данные, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(почва, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(урожайность, iot_шлюз, "Передает данные", "4G")

Rel(kafka, планировщик, "Поток задач", "Kafka Protocol")
Rel(мониторинг_гсм, dwh, "Сохраняет данные", "ETL")
Rel(диагностика, erp, "Передает данные о ремонтах", "REST API")

Rel(data_lake, аналитика, "Доступ к сырым данным", "Spark")
Rel(dwh, аналитика, "Доступ к структурированным данным", "SQL")
Rel(аналитика, bi, "Передает отчеты", "ODBC")
Rel(аналитика, веб_портал, "Формирует рекомендации", "WebSocket")

Rel(веб_портал, erp, "Синхронизация данных", "REST API")
Rel(erp, dwh, "Бизнес-данные", "ETL")
Rel(мобильное_приложение, kafka, "Полевые отчеты", "Kafka Protocol")

Rel(ферм_агент, kafka, "Публикует телеметрию и события кормления")
Rel(kafka, ферм_агент, "Команды управления", "Потребители Kafka")
Rel(видеоаналитика, ферм_агент, "Отправляет результаты анализа")
Rel(ферм_датчики, видеоаналитика, "Передает поток видео/данные")
Rel(ферм_агент, ферм_бд, "Буферизация данных", "SQL")
Rel(ферм_агент, кормление, "Управление исполнительными механизмами")

@enduml



@startuml Архитектура_АгроТех_Системы__С2_2_внешний_брокер

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(директор, "Директор хозяйства", "Управление через веб-портал")
Person(агроном, "Агроном", "Использует мобильное приложение")
Person(тепличник, "Тепличный комплекс", "Управление теплицами")
Person(механик, "Механик", "Мониторинг техники")
Person(аналитик, "Аналитик", "Работа с BI-системой")
Person(скотовод, "Скотовод", "Мониторит и управляет фермой")

System_Boundary(платформа, "АгроТех Х - Цифровая платформа") {
    Container(веб_портал, "Веб-портал", "React", "Управление хозяйством")
    Container(мобильное_приложение, "Мобильное приложение", "Flutter", "Полевые работы")
    ContainerDb(erp, "ERP система (1С:Агро)", "1С", "Финансы, склад, кадры")
    
    Container_Boundary(тепличные_системы, "Тепличные комплексы") {
        Container(scada, "SCADA система", "Ignition", "Управление климатом")
        Container(тепличные_датчики, "Тепличные датчики", "Python", "Микроклимат, полив")
        Container(автополив, "Система автополива", "C++", "Управление орошением")
    }
    
    Container(kafka, "Центральный брокер сообщений", "Apache Kafka", "Шина данных внутри платформы")
    
    Container_Boundary(iot_платформа, "IoT платформа") {
        Container(iot_шлюз, "IoT шлюз", "Node-RED", "Сбор данных с полей")
        Container(tsdb, "База временных рядов", "TimescaleDB", "Данные датчиков")
        Container(трекер_техники, "Трекер техники", "Java", "Мониторинг транспорта")
        Container(трекер_корма, "Трекер системы кормления скота", "Go", "Контроль кормушек и поилок")
    }
    
    Container_Boundary(полевые_данные, "Данные с полей") {
        Container(метео_данные, "Метеостанции", "Python", "Погодные условия")
        Container(почва, "Датчики почвы", "Python", "Влажность, состав")
        Container(урожайность, "Мониторинг урожая", "Python", "Камера+ИИ на технике")
    }
    
    Container_Boundary(управление_техникой, "Управление техникой") {
        Container(планировщик, "Планировщик заданий", "Kotlin", "Распределение работ")
        Container(мониторинг_гсм, "Мониторинг ГСМ", "Go", "Контроль топлива")
        Container(диагностика, "Диагностика", "C#", "Состояние техники")
    }
    
    Container_Boundary(данные, "Хранилища данных") {
        ContainerDb(data_lake, "Data Lake", "MinIO", "Сырые данные (S3-совместимое)")
        ContainerDb(dwh, "Data Warehouse", "ClickHouse", "Структурированные данные")
    }
    
    Container(bi, "BI система", "Power BI", "Отчеты и визуализация")
    Container(аналитика, "Аналитический модуль", "Python+Spark", "Анализ эффективности")
    
    Container(центральный_агент, "Локальный агент фермы (централизованный)", "Go", "Управление связью с фермами")
}

System_Boundary(внешние_интеграции, "Интеграционный слой") {
    Container(внешняя_kafka, "Внешний брокер сообщений", "Apache Kafka", "Обмен между агентами и платформой")
}

Container_Boundary(фермы, "Система животноводства (фермы)") {
    Container(ферм_агент, "Локальный агент фермы", "Управление и буферизация данных")
    Container(видеоаналитика, "Видеоаналитика", "Обработка потоков камер")
    ContainerDb(ферм_бд, "Локальная БД", "Postgres", "Хранение событий и метрик")
    Container(кормление, "Система кормления и поения", "Управление кормушками и поилками")
    Container(ферм_датчики, "Датчики и камеры", "Поведение, здоровье, пересчет поголовья, местоположение")
}

' --- Связи пользователей ---
Rel(директор, веб_портал, "Использует")
Rel(агроном, мобильное_приложение, "Использует")
Rel(тепличник, scada, "Управляет")
Rel(механик, трекер_техники, "Мониторит")
Rel(аналитик, bi, "Анализирует")
Rel(скотовод, трекер_корма, "Следит за состоянием кормушек и поилок")

' --- Связи внутри платформы ---
Rel(iot_шлюз, kafka, "Публикует данные", "Kafka Protocol")
Rel(тепличные_датчики, kafka, "Публикует данные", "MQTT->Kafka")
Rel(трекер_техники, kafka, "Публикует позиции", "Kafka Protocol")
Rel(трекер_корма, kafka, "Публикует данные кормления", "Kafka Protocol")
Rel(kafka, data_lake, "Сырые данные", "Kafka Connect+S3")
Rel(kafka, dwh, "Трансформированные данные", "ETL+Airflow")

Rel(scada, kafka, "Публикует климат-данные", "OPC UA->Kafka")
Rel(автополив, scada, "Получает команды", "Modbus TCP")
Rel(тепличные_датчики, scada, "Передает данные", "LoRaWAN")

Rel(метео_данные, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(почва, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(урожайность, iot_шлюз, "Передает данные", "4G")

Rel(kafka, планировщик, "Поток задач", "Kafka Protocol")
Rel(мониторинг_гсм, dwh, "Сохраняет данные", "ETL")
Rel(диагностика, erp, "Передает данные о ремонтах", "REST API")

Rel(data_lake, аналитика, "Доступ к сырым данным", "Spark")
Rel(dwh, аналитика, "Доступ к структурированным данным", "SQL")
Rel(аналитика, bi, "Передает отчеты", "ODBC")
Rel(аналитика, веб_портал, "Формирует рекомендации", "WebSocket")

Rel(веб_портал, erp, "Синхронизация данных", "REST API")
Rel(erp, dwh, "Бизнес-данные", "ETL")
Rel(мобильное_приложение, kafka, "Полевые отчеты", "Kafka Protocol")

' --- Новые связи с фермами через внешнюю Kafka ---
Rel(ферм_агент, внешняя_kafka, "Публикует телеметрию и события")
Rel(внешняя_kafka, центральный_агент, "Передает данные ферм", "Kafka Protocol")
Rel(центральный_агент, kafka, "Публикует во внутреннюю шину", "Kafka Protocol")

' --- Добавляем поток команд управления ---
Rel(kafka, центральный_агент, "Команды управления", "Kafka Protocol")
Rel(центральный_агент, внешняя_kafka, "Передает команды управления", "Kafka Protocol")
Rel(внешняя_kafka, ферм_агент, "Доставляет команды на ферму", "Kafka Protocol")
Rel(ферм_агент, кормление, "Управление кормушками и поилками")

' --- Взаимодействие компонентов фермы ---
Rel(видеоаналитика, ферм_агент, "Отправляет результаты анализа")
Rel(ферм_датчики, видеоаналитика, "Передает поток видео/данные")
Rel(ферм_агент, ферм_бд, "Буферизация данных", "SQL")

@enduml


# Task2 — MVP платформы мониторинга ферм

# Ограниченные контексты системы животноводства

## BC-01 — Шлюз-Устройств (Device Gateway)
**Назначение:** адаптация протоколов (MQTT/LoRa/Modbus/Serial), нормализация сообщений от датчиков и камер.  
**Размещение:** на ферме (edge).  
**Компромиссы:** для разных вендоров нужны отдельные адаптеры.  
**Риски:** несовместимость прошивок → снижение устойчивости; смягчается тестированием и версионированием адаптеров.

---

## BC-02 — Видеоаналитика (Video Edge)
**Назначение:** обработка видеопотоков RTSP, применение ИИ для выявления событий (поведение животных, болезни, падения).  
**Размещение:** на ферме (edge GPU/Jetson).  
**Компромиссы:** низкая задержка vs сложность обновления моделей.  
**Риски:** ложные тревоги → решается настройкой confidence threshold и объединением с данными сенсоров.

---

## BC-03 — Управление-Актуаторами (Actuator Manager)
**Назначение:** контроль кормушек, поилок, освещения и т.д.  
**Размещение:** критическая логика — на ферме; планирование — на платформе.  
**Компромиссы:** необходимо обеспечивать безопасность команд.  
**Риски:** опасные команды → смягчается встроенной безопасной логикой в контроллерах.

---

## BC-04 — Метрики-и-Телеметрия (Telemetry Metrics)
**Назначение:** сбор метрик, передача в центральную систему.  
**Размещение:** edge (экспортеры) и центр (TimescaleDB/ClickHouse).  
**Компромиссы:** нужен баланс между хранением на ферме и пересылкой в центр.  
**Риски:** потеря данных при сбое → буферизация и повторная отправка.

---

## BC-05 — Агент-Фермы (Farm Sync Agent)
**Назначение:** локальная оркестрация, буферизация, offline-first, синхронизация с центральной шиной.  
**Размещение:** edge (одна ВМ/одноплатный ПК).  
**Компромиссы:** усложнение архитектуры, но высокая надёжность.  
**Риски:** конфликты синхронизации → смягчается использованием idempotency ключей и версий сообщений.

---

## BC-06 — Локальная-БД (Local DB)
**Назначение:** хранение событий, состояний и метрик.  
**Размещение:** Postgres на ферме; TimescaleDB/ClickHouse в центре.  
**Риски:** рост объёма данных → решается ретеншн-политикой.

---

## BC-07 — Локальный-UI (Local UI)
**Назначение:** интерфейс для фермера (мониторинг, ручное управление).  
**Размещение:** edge.  
**Риски:** офлайн-аутентификация → решается кешированием токенов и локальными правами.

---

## BC-08 — Оповещения (Alerts Local)
**Назначение:** локальные уведомления (сирены, SMS).  
**Размещение:** edge и центр.  
**Риски:** ложные срабатывания → решается подтверждением из нескольких источников.

---

## BC-09 — Управление-Устройствами (Provisioning)
**Назначение:** добавление устройств, обновления прошивок, управление сертификатами.  
**Размещение:** центральная система, а выполнение — через агент на ферме.  
**Риски:** неудачные обновления → требуется стратегия отката.


# ADR-F01 — Выбор брокера сообщений для системы животноводства

## Контекст
Нужна шина данных для обмена телеметрией, событиями и командами между фермой и центральной платформой. Система должна быть устойчива к офлайн-режиму и масштабируема для аналитики.

## Решение
Выбран **Apache Kafka** как основной брокер в центре.  
На ферме используется **локальный агент**, который буферизует данные и передаёт их в Kafka.  
Для связи с датчиками и актуаторами на ферме применяется локальный MQTT-брокер.

## Альтернативы
- RabbitMQ — проще развернуть, поддерживает MQTT, но хуже масштабируется и не так удобен для стрим-аналитики.  
- Прямой MQTT в облако — простая интеграция, но нет event-store и гарантированного порядка сообщений.

## Компромиссы
Kafka сложнее в эксплуатации, требует больше ресурсов, но лучше подходит для долгосрочной архитектуры.

## Риски
- Сложность эксплуатации Kafka → смягчается использованием управляемых сервисов или выделенной команды.  
- Возможные задержки при офлайне → смягчается локальным буфером (агент + Postgres).

## Рекомендация
Стратегически — Kafka.  
Практически — использовать гибрид: локальный MQTT + агент-bridge → Kafka.

# ADR-F02 — Размещение модуля видеоаналитики

## Контекст
Необходимо анализировать поведение животных и выявлять события с минимальной задержкой.

## Решение
Разместить обработку и inference на ферме (edge). Обучение и ретроспективная аналитика — в центре.

## Компромиссы
- На edge — ниже задержка, меньше сетевого трафика. Но сложнее обновлять модели.  
- В центре — проще управлять моделями, но выше требования к сети.

## Риски
- Ложные тревоги (ночь, тени) → решается дополнительной обработкой и объединением сигналов.  
- Ошибки в обновлениях модели → решается версионированием и канареечным развертыванием.


# ADR-F03 — Offline-first архитектура

## Контекст
Фермы могут работать с перебоями связи. Система должна быть устойчива и продолжать работу локально.

## Решение
Использовать локального агента и БД, которые сохраняют события и синхронизируют их при восстановлении связи.  
Команды и события используют idempotency ключи.

## Компромиссы
- Локальная автономность важнее строгой согласованности.  
- Центральная система остаётся источником «истины», но ферма должна работать независимо.

## Риски
- Конфликты при синхронизации → решается версионированием сообщений и стратегиями разрешения конфликтов (последнее значение, CRDT).


# ADR-F04 — Выбор протоколов

## Решение
- Датчики и актуаторы: MQTT (QoS=1 для телеметрии, QoS=2 для критичных команд).  
- Камеры: RTSP/ONVIF.  
- Агент ↔ Платформа: Kafka (данные), REST/gRPC (управление).  

## Компромиссы
MQTT удобен для IoT, Kafka — для аналитики и хранения истории.


# ADR-F05 — Локальное и центральное хранилище данных

## Решение
- На ферме: Postgres (ACID, удобство работы с агентом).  
- В центре: TimescaleDB (временные ряды) и ClickHouse (аналитика).

## Риски
- Увеличение объёма локальных данных → решается политикой хранения и архивированием.

# Варианты контейнерных диаграмм

## Вариант A — Kafka (рекомендуемый)

@startuml C2_Farm_Kafka_RU_Final2
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

System_Boundary(ферма, "Система животноводства (ферма)") {
  Container(ферм_агент, "Локальный агент фермы", "Буферизация данных, синхронизация с платформой, локальный API")
  Container(видеоаналитика, "Видеоаналитика", "Приём RTSP-потоков, инференс, формирование событий")
  ContainerDb(ферм_бд, "Локальная база данных", "Сохранение событий, метрик и локальных планов")
  Container(кормление, "Контроллер кормления и поения", "Локальная автоматика — управление кормушками и поилками")
  Container(локальный_gateway, "Шлюз устройств", "MQTT / Modbus / LoRa адаптеры, нормализация телеметрии")
  Container(локальный_ui, "Локальный интерфейс оператора", "Панель мониторинга и ручного управления для скотовода")
}

' --- Внешний брокер сообщений ---
Container(внешний_broker, "Внешний брокер сообщений", "Шина данных платформы (не часть фермы)")

' --- Внутренние связи фермы ---
Rel(локальный_gateway, видеоаналитика, "RTSP — видеопоток")
Rel(видеоаналитика, ферм_агент, "JSON-события / результаты ИИ")
Rel(локальный_gateway, ферм_агент, "MQTT — телеметрия и события устройств")
Rel(ферм_агент, ферм_бд, "Сохраняет события и метрики", "SQL")
Rel(ферм_агент, кормление, "Отправляет команды управления (с проверками безопасности)")
Rel(локальный_ui, ферм_агент, "Отправка ручных команд, мониторинг состояния фермы")
Rel(локальный_ui, кормление, "Ручное управление кормушками и поилками")

' --- Связь фермы ↔ внешний брокер ---
Rel(ферм_агент, внешний_broker, "Публикация телеметрии и событий", "Протокол Kafka")
Rel(внешний_broker, ферм_агент, "Доставка управляющих команд", "Протокол Kafka")

' --- Оператор ---
Person(скотовод, "Скотовод", "Локальный оператор")
Rel(скотовод, локальный_ui, "Использует (мониторинг, ручное управление)")

@enduml

## Вариант B — RabbitMQ (альтернатива для быстрого пилота)

@startuml C2_Ферма_RabbitMQ
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

System_Boundary(ферма, "Система животноводства (ферма)") {
  Container(агент_фермы, "Локальный агент фермы", "Go", "Буферизация, синхронизация с платформой, локальный API")
  Container(видеоаналитика, "Видеоаналитика", "Python + TensorRT", "RTSP поток, обработка, события")
  ContainerDb(локальная_бд, "Локальная база данных", "Postgres", "Сохранение событий, метрик, локальных планов")
  Container(система_кормления, "Контроллер кормления и поения", "PLC / Embedded", "Локальная автоматика")
  Container(шлюз_устройств, "Шлюз устройств", "Go/Node", "MQTT/Modbus/LoRa адаптеры")
  Container(локальный_интерфейс, "Локальный интерфейс оператора", "React/Static", "Интерфейс для скотовода")
}

System_Boundary(внешние_интеграции, "Интеграционный слой") {
  Container(rabbitmq, "Внешний брокер сообщений", "RabbitMQ", "Обмен данными между агентами и платформой")
}

' Внутренние связи фермы
Rel(шлюз_устройств, видеоаналитика, "RTSP / видеопоток")
Rel(видеоаналитика, агент_фермы, "JSON события / результаты AI")
Rel(шлюз_устройств, агент_фермы, "Телеметрия устройств / события")
Rel(агент_фермы, локальная_бд, "Сохранение событий и метрик", "SQL")
Rel(агент_фермы, система_кормления, "Команды управления (с проверкой безопасности)", "Локальный API / Modbus")
Rel(локальный_интерфейс, агент_фермы, "Мониторинг и ручное управление")

' Связь фермы ↔ внешняя платформа через RabbitMQ
Rel(агент_фермы, rabbitmq, "Публикация телеметрии и событий", "AMQP")
Rel(rabbitmq, агент_фермы, "Доставка команд управления", "AMQP")

' Операторы
Person(скотовод, "Скотовод", "Локальный оператор")
Rel(скотовод, локальный_интерфейс, "Использует для мониторинга и управления")

@enduml

# Сравнительный анализ решений (по критериям)

Критерии (специфичны для фермы): производительность/latency, офлайн/ресилиентность, поддержка IoT, простота развёртывания на ферме, интеграция с AI/analytics, TCO.

| Критерий                        | Вариант A: Kafka             | Вариант B: RabbitMQ               |
|---------------------------------|------------------------------|----------------------------------|
| E2E задержка тревоги             | ++ (мс–с)                    | +++ (мс)                         |
| Поддержка IoT устройств          | + (через мосты)              | +++ (native MQTT)                 |
| Надёжность в офлайне             | ++ (нужен буфер)             | ++ (локальный broker легче)       |
| Масштабируемость & аналитика     | +++                          | ++                               |
| Сложность развёртывания на ферме | +                            | +++                              |
| Интеграция с ML/stream           | +++                          | +                                |
| Рекомендованность для долгосрочной стратегии | +++                  | ++ (только пилот)                 |

**Интерпретация:**

- **Kafka** — лучший выбор для долгосрочного решения и интеграции с аналитикой/ML. На ферме требуется агент/bridge и продвинутый DevOps.  
- **RabbitMQ** — быстрый и простой вариант для пилота; нативная MQTT-поддержка ускоряет интеграцию устройств.  

